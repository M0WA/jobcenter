#!/usr/bin/env perl

use Mojo::Base -strict;

#
# Mojo's default reactor uses EV, and EV does not play nice with signals
# without some handholding. We either can try to detect EV and do the
# handholding, or try to prevent Mojo using EV.
#
BEGIN {
	$ENV{'MOJO_REACTOR'} = 'Mojo::Reactor::Poll';
}

# standard perl
use Cwd qw(realpath);
use Data::Dumper;
use FindBin;
use Getopt::Long;
use Time::HiRes qw( time );

# from cpan
use Config::Tiny;

# more mojo
use Mojo::IOLoop;
use Mojo::Log;

# JobCenter
use lib realpath("$FindBin::Bin/../lib");
use JobCenter::Pg;
use JobCenter::Util qw(:daemon);

# transaction backoff time
our $backoff = 0.1;

# minimal timer value
our $timer_min = 0.1;

# some handy package globals
our ($ioloop, $jcpg, $log, $tmr, $next);

exit main();

sub _calljobtaskproc {
	my ($db, $proc, $arg, $retries) = @_;
	$retries ||= 1;
	#$log->debug("select * from $proc($arg)");
	$db->query("select * from $proc(\$1)", $arg, sub {
		my ($db, $err, $res) = @_;
		$log->debug("_calljobtaskproc callback");
		my $sqlstate = $res->sth->state;
		if ($sqlstate eq '40001' or $sqlstate eq '40P01') {
			$log->debug("scheduling retry of _calljobtaskproc $proc($arg): $sqlstate");
			$res->sth->finish;
			# try a backoff with a bit of randomness
			$ioloop->timer(($backoff + rand($retries * $backoff)) => sub {
				$log->debug("retry $retries of _calljobtaskproc $proc($arg)");
				_calljobtaskproc($db, $proc, $arg, $retries + 1);
			});
			return;
		}
		if ($err) {
			$res->sth->finish;
			$log->error("_calljobtaskproc $proc($arg): got errror $err");
			return;
		}
		my $r = $res->array;
		$res->sth->finish;
		#print 'r: ', Dumper($r);
		return unless ref $r eq 'ARRAY' and defined @$r[1];
		my ($error, $jobtask) = @$r;
		if ($error) {
			$log->debug("_calljobtaskproc: error condition, calling errortask $jobtask");
			_calljobtaskproc($db, 'do_jobtaskerror', $jobtask);
		} else {
			$log->debug("do_next_cb: next: $jobtask");
			_calljobtaskproc($db, 'do_jobtask', $jobtask);
		}
		return;
	});
}

sub calljobtaskproc {
	my ($proc, $arg) = @_;
	local $@;
	unless (eval {
		$jcpg->queue_query( sub {
			my ($db) = @_;
			_calljobtaskproc($db, $proc, $arg );
		});
		1;
	}) {
		my $err = $@;
		$log->error("calljobtaskproc got $err");
		#if ($err =~ /too many connections/) {
		#	$log->debug('todo: implement this');
		#}
	}
}

sub do_settimer {
	my ($pubsub, $payload) = @_;
	my $now = time();

	# payload is an empty string when no payload was sent..
	$log->debug("timer notification: '$payload'");
	#$log->debug("settimer: '" . ((defined $payload) ? $payload : '<null>')
	#	. "' now: $now next: $next");

	if ($payload ne '') {
		if ($now + $payload < $next or $next <= $now) {
			$payload = $timer_min if $payload < $timer_min;
			$log->debug("setting timer to $payload seconds");

			$ioloop->remove($tmr) if $tmr;
			#$tmr = $ioloop->timer($payload => \&do_timeout);
			$tmr = $ioloop->timer($payload =>  sub {
				$log->debug('timer: do_timeout');
				calljobtaskproc('do_timeout', '(dummy)');
			});
			$next = $now + $payload;
		}
	} elsif ($tmr) {
		$log->debug("disabling timer");
		$ioloop->remove($tmr);
		undef $tmr;
		$next = $now;
	}
}

sub main {
	my $config = realpath("$FindBin::Bin/../etc/jobcenter.conf");
	my $daemon = 0;
	my $debug = 0;

	GetOptions(
		'config=s' => \$config,
		'daemon!' => \$daemon,
		'debug!', => \$debug,
	) or die "Error in command line arguments\n";

	$ENV{'PGAPPNAME'} = "maestro [$$]";
	my $cfg = Config::Tiny->read($config);
	die 'Config Errror: ' . Config::Tiny->errstr() unless $cfg;
	#print Dumper($cfg);

	my $pid_file = $cfg->{pid_file} // realpath("$FindBin::Bin/../log/maestro.pid");
	die "maestro already running?" if check_pid($pid_file);

	$log = Mojo::Log->new(level => ($debug) ? 'debug' : 'info');
	$log->path(realpath("$FindBin::Bin/../log/maestro.log")) if $daemon;
	# todo: config

	if ($debug) {
		# pg log messages come as perl warnings, so log warnings
		$SIG{__WARN__} = sub {
			my ($w) = @_;
			$w =~ s/\n$//; $w =~ s/\n/ \\n /;
			$log->warn($w)
		};
	}

	daemonize() if $daemon;
	ensure_pid_file($pid_file, $log);

	$jcpg = JobCenter::Pg->new(
		'postgresql://'
		. $cfg->{maestro}->{user}
		. ':' . $cfg->{maestro}->{pass}
		. '@' . ( $cfg->{pg}->{host} // '' )
		. ( ($cfg->{pg}->{port}) ? ':' . $cfg->{pg}->{port} : '' )
		. '/' . $cfg->{pg}->{db}
	);
	$jcpg->log($log);
	$jcpg->max_total_connections($cfg->{pg}->{con} // 5);

	$jcpg->on(connection => sub {
		my ($jcpg, $dbh) = @_;
		return unless $debug;
		#$dbh->trace('DBD');
		$dbh->{PrintWarn} = 1; # pg log messages are warnings too
		$dbh->do("select set_config('client_min_messages', 'log', false)");
		$log->debug("jcpg: $jcpg has new connection: $dbh");
	});

	for my $listen (qw[jobtask jobtaskdone jobtaskerror ping]) {
		$jcpg->pubsub->listen($listen => sub {
			my ($pubsub, $payload) = @_;
			$log->debug("got NOTIFY \"$listen\""
				. ($payload ? ", '$payload';" : ''));
			calljobtaskproc("do_$listen", $payload);
		});
	}

	$next = time()-1; # somewhere in the past
	$jcpg->pubsub->listen('timer' => \&do_settimer);

	$jcpg->pubsub->listen('timerquery' => sub {
		$log->debug('got timerquery notification');
		$jcpg->pubsub->notify('nexttimer', $next);
	});

	$ioloop = Mojo::IOLoop->singleton;

	my $mopupper = $ioloop->recurring(60 => sub {
		$log->debug('recurring: do_archival_and_cleanup');
		calljobtaskproc('do_archival_and_cleanup', '(dummy)');
	});

	# this is safe as long as there is only one maestro (us)
	calljobtaskproc('do_crash_recovery', '(dummy)');

	local $SIG{TERM} = local $SIG{INT} = sub {
		my $sig = shift;
		$log->info("caught sig$sig.");
		$ioloop->stop
	};

	$ioloop->start;

	$log->info('the end is nigh!');
	unlink $pid_file if -w $pid_file;

	return 0;
}

1;

