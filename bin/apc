#!/usr/bin/env perl

# standard stuff
use Data::Dumper;
use FindBin;

# mojo stuff
use Mojo::Base -base;
use Mojo::Util qw(slurp);
use Mojo::IOLoop;
use Mojo::Pg;
use Mojo::JSON qw(decode_json encode_json);

# other stuff
use Config::Tiny;

exit main(@ARGV);

sub main {
	my ($af) = @_;

	unless ($af) {
		die "usage: $0 <filename>";
	}
	
	my $asrc = slurp( $af );
	
	my $app = JobCenter::APParser->new();
	# pass a refenrence so we can keep the position of the last match
	# and safe some copying..
	my $actions = $app->parse(\$asrc);
	print 'actions : ', Dumper($actions);

	# what do we call ourselves
	my $clientname = "$0 [$$]";

	# make our application_name in postgresql our clientname
	$ENV{'PGAPPNAME'} = $clientname;

	my $cfg = Config::Tiny->read("$FindBin::Bin/../etc/jobcenter.conf");
	die 'Config Errror: ' . Config::Tiny->errstr() unless $cfg;
	#print Dumper($cfg);

	my $pg = Mojo::Pg->new(
		'postgresql://'
		. $cfg->{admin}->{user}
		. ':' . $cfg->{admin}->{pass}
		. '@' . $cfg->{pg}->{host}
		. ':' . $cfg->{pg}->{port}
		. '/' . $cfg->{pg}->{db}
	);

	my $apg = JobCenter::APGenerator->new($pg->db);
	$apg->generate($_) for @$actions;

	say "the end is nigh!";
	return 0;
}

#
#
#
package JobCenter::APParser;

use Mojo::Base -base;
use Data::Dumper;
use List::Util qw( first );
use Text::Balanced qw( extract_delimited );

sub new {
	my $class = shift;
	my $self = bless {
		src => undef,
		pos => undef,
	}, $class;
	return $self;
}

sub parse {
	my ($self, $src) = @_;
	die "expect source to be a reference to a scalar" unless ref $src eq 'SCALAR';

	say 'got src: ', $$src;
	$self->{src} = $src;
	$self->{pos} = 0;

	local $@;
	my $res = eval { $self->parse_actionsandprocedures };
	$self->error($@) if $@;
	return $res;
}

#################################################
#
# top level
#
sub parse_actionsandprocedures {
	my $self = shift;
	my $src = $self->{src};
	my @actions = ();

	while (1) {
		$self->find_next_token;
		say 'at: ', substr($$src, pos $$src, 10);
		last unless $$src =~ /\G(action|procedure)/cgms;
		$self->{pos} = pos $$src;
		my $found = $1;
		say "found $found";

		my $action = bless {}, $found;

		my $name = $self->parse_ident;
		say 'found action name: ', $name; #, ' pos ', $self->{pos};
		$action->{name} = $name;

		$self->find_keyword('\[');
		say 'found [';

		while ( my $found = $self->find_keyword(qw(in out \])) ) {
			say 'found keyword ', $found;
			last if $found eq '\]';
			my $parsefunc = "parse_$found";
			$action->{$found} = $self->$parsefunc();
			say 'done with ', $found;
		}

		# attach labels to action object
		$action->{labels} = $self->{labels};
		#print 'action: ', Dumper($action);
		push @actions, $action;
	}
	return \@actions;
}

#################################################
#
# second level
#
sub parse_in {
	my $self = shift;
	return $self->parse_inout;
}

sub parse_out {
	#my $self = shift;
	return $_[0]->parse_inout;
}

sub parse_inout {
	my $self = shift;
	my $src = $self->{src};
	my @io;

	$self->find_keyword('\[');
	say 'found [';
	$self->find_next_token;
	while ($$src !~ /\G\]/cgms) {
		my $name = $self->parse_ident;
		my $type = $self->parse_ident;
		my $default;
		$self->find_next_token;
		if ($$src !~ /\G;/cgms) {
			$default = $self->parse_ident;
		} 
		$self->find_keyword(';');
		say 'name ', $name, ' type ', $type, ' default ', $default // '<undef>';
		push @io, [$name, $type, $default];
		$self->find_next_token;
	}

	$self->{pos} = pos $$src;
	return bless \@io, 'inout';
}

#################################################
#
# helpers
#
sub parse_ident {
	my $self = shift;
	$self->find_next_token;
	my $src = $self->{src};
	# first try a simple unquoted word
	if ($$src =~ /\G(\w+)/cmsg ) {
		$self->{pos} = pos $$src;
		return $1;
	}
	# maybe it's quoted then?
	my $match;
	unless ( $match = (extract_delimited($$src, '\'"'))[0] ) {
		pos $$src = $self->{pos}; # dunno if extract resets pos on fail
		die "JCP: expected identier: $@ at " . substr($$src, $self->{pos}, 10);
	}
	$self->{pos} = pos $$src;
	# now remove outer quotes
	$match =~ s/^(['"])(.*)\1$/$2/;
	return $match;
}

sub find_keyword {
	my ($self, @kw) = @_;
	$self->find_next_token;
	my $src = $self->{src};
	if (my $found = first { $$src =~ /\G$_/cmsg } @kw ) {
		$self->{pos} = pos $$src;
		return $found;
	}
	die 'JCP: expected keyword ' . join(', ', @kw) . ' not found';
}

#
# search for the next token from the current posiotion
# skipping whitespace and comments
# set the position to the next token
#
sub find_next_token {
	my $self = shift;
	my $src = $self->{src} or die 'no source?';
	my $pos = $self->{pos} // 0;
	pos $$src = $pos;

	# find next non whitespace
	while (	$$src =~ /\G\s*/cgms ) {
		#$pos = pos $$src;
		if ($$src =~ /\G#\[(\w*)\[/cgms) {
			# multiline comment.. skip untill end marker
			my $marker = $1;
			#say 'got marker ', $1, ' pos ', pos $$src;
			unless ($$src =~ /\G(.*?)#\]$marker\]/cgms) {
				die 'JCP: could not find end marker of multiline comment';
			}
			say 'skipped multiline comment ', $1;
		} elsif ($$src =~ /\G#(.*?)$/cgms) {
			# matched a single line comment
			say 'skipped comment ', $1;
		}
		$pos = pos $$src;
	}
	#say 'find_next_token: pos now ', $pos;
	$self->{pos} = $pos;
}

#################################################
#
# error handler
#
sub error {
	my ($self, $error) = @_;
	my $src = $self->{src} // '';
	my $pos = $self->{pos} // 0;
	my $line = 0;
	my @linepos = (0);

	pos $$src = 0; # from the top
	while ($$src =~ /$/gsm){
		push @linepos, $-[0];
	}

	#say 'pos: ', $pos, ' lines: ', join(', ', @linepos);

	for my $l (0..$#linepos) {
		if ($linepos[$l] > $pos) {
			# this works because the array is 0-based
			# but we count lines from 1
			$line = $l;
			$pos = $pos - $linepos[$l-1];
			last;
		}
	}

	if ( $error =~ /^JCP:/ ) {
		$error =~ s/^JCP: (.+) at (.+)$/$1/s;
		die "$error at line $line pos $pos near '" . substr($$src, $self->{pos} // 0, 10) . "'\n";
	}
	die $error;
}

#################################################
#
# action generatror
#
package JobCenter::APGenerator;

use Mojo::Base -base;
use Mojo::Util qw( quote );
use Data::Dumper;
use Scalar::Util qw( blessed );

sub new {
	my ($class, $db) = @_;
	my $self = bless {
		db => $db,	# db connection to use
	}, $class;
	return $self;
}

sub generate {
	my ($self, $wf) = @_;
	my $what = blessed($wf);
	die 'not an action or procedure' unless $what eq 'action' or $what eq 'procedure';
	
	say "\nbegin";
	my $tx  = $self->{db}->begin;

	my $version = 1; # start at 1
	# find out if a version alreay exists, if so increase version
	{
		my $res = $self->{db}->dollar_only->query(
			q|select version from actions where name = $1 and type = $2 order by version desc limit 1|, 
			$wf->{name}, $what
		)->array;
		#print 'res: ', Dumper($res);
		if ( $res and @$res and @$res[0] >= 0 ) {
			$version = @$res[0] + 1;
		}
	}

	my $aid = $self->qs(
		q|insert into actions (name, type, version) values ($1, $2, $3) returning action_id|, 
		$wf->{name}, $what, $version
	);
	say "aid: $aid";

	# use a fake returning clause to we can reuse our qs function	
	for my $in (@{$wf->{in}}) {
		$self->qs(
			q|insert into action_inputs (action_id, name, type, optional, "default") values ($1, $2, $3, $4, $5) returning action_id|,
			$aid, $$in[0], $$in[1], ($$in[2] ? 'true' : 'false'), $$in[2]
		);
	}

	for my $out (@{$wf->{out}}) {
		$self->qs(
			q|insert into action_outputs (action_id, name, type, optional) values ($1, $2, $3, $4) returning action_id|,
			$aid, $$out[0], $$out[1], (($$out[2] && $$out[2] eq 'optional') ? 'true' : 'false')
		);
	}

	say "commit";
	$tx->commit;
}

### helpers ###

# query with single return value
sub qs {
	my ($self, $q, @a) = @_;
	my $res = $self->{db}->dollar_only->query($q, @a)->array;
	die "query failed" unless $res and @$res and @$res[0];
	say "query: $q [", join(',', map { $_ // '' } @a), "] => @$res[0]";
	return @$res[0];
}

