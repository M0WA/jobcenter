#!/usr/bin/env perl

# standard stuff
use Data::Dumper;
use FindBin;

# mojo stuff
use Mojo::Base -base;
use Mojo::Util qw(slurp);
use Mojo::IOLoop;
use Mojo::Pg;
use Mojo::JSON qw(decode_json encode_json);

# other stuff
use Config::Tiny;

exit main(@ARGV);

sub main {
	my $tags;
	if ($_[0] eq '--tags') {
		shift;
		$tags = shift;
		die 'no tags?' unless $tags;
	}

	my $wff = shift;

	unless ($wff) {
		die "usage: $0 [--tags <tag1[:tagN]>] <filename>";
	}
	
	my $wfsrc = slurp( $wff );
	
	my $jp = JobCenter::Parser->new();
	# pass a refenrence so we can keep the position of the last match
	# and safe some copying..
	my $wf = $jp->parse(\$wfsrc);
	
	# what do we call ourselves
	my $clientname = "$0 [$$]";

	# make our application_name in postgresql our clientname
	$ENV{'PGAPPNAME'} = $clientname;

	my $cfg = Config::Tiny->read("$FindBin::Bin/../etc/jobcenter.conf");
	die 'Config Errror: ' . Config::Tiny->errstr() unless $cfg;
	#print Dumper($cfg);

	my $pg = Mojo::Pg->new(
		'postgresql://'
		. $cfg->{admin}->{user}
		. ':' . $cfg->{admin}->{pass}
		. '@' . $cfg->{pg}->{host}
		. ':' . $cfg->{pg}->{port}
		. '/' . $cfg->{pg}->{db}
	);

	my $jcg = JobCenter::CodeGenerator->new($pg->db, $tags);
	$jcg->generate($wf);

	say "the end is nigh!";
}

#
#
#
package JobCenter::Parser;

use Mojo::Base -base;
use Data::Dumper;
use List::Util qw( first );
use Text::Balanced qw( extract_delimited );

sub new {
	my $class = shift;
	my $self = bless {
		src => undef,
		pos => undef,
		labels => undef,
	}, $class;
	return $self;
}

sub parse {
	my ($self, $src) = @_;
	die "expect source to be a reference to a scalar" unless ref $src eq 'SCALAR';

	say 'got src: ', $$src;
	$self->{src} = $src;
	$self->{pos} = 0;
	$self->{labels} = {};

	local $@;
	my $res = eval { $self->parse_workflow };
	$self->error($@) if $@;
	return $res;
}

#################################################
#
# top level
#
sub parse_workflow {
	my $self = shift;

	$self->find_keyword('workflow');
	say 'found workflow';

	my $workflow = bless {}, 'workflow';

	my $name = $self->parse_ident;
	say 'found workflow name: ', $name; #, ' pos ', $self->{pos};
	$workflow->{name} = $name;

	$self->find_keyword('\[');
	say 'found [';

	while ( my $found = $self->find_keyword(qw(in out do wfomap \])) ) {
		say 'found keyword ', $found;
		last if $found eq '\]';
		#{
		#	'in' => \&{$self->parse_in},
		#	'out' => \&{$self->parse_out},
		#	'do' => \&{$self->parse_do},
		#	'wfomap' => \&{$self->parse_wfmap},
		my $parsefunc = "parse_$found";
		$workflow->{$found} = $self->$parsefunc();
		say 'done with ', $found;
	}

	# attach labels to workflow object
	$workflow->{labels} = $self->{labels};
	print 'workflow: ', Dumper($workflow);
	return $workflow;
}

#################################################
#
# second level
#
sub parse_in {
	my $self = shift;
	return $self->parse_inout;
}

sub parse_out {
	#my $self = shift;
	return $_[0]->parse_inout;
}

sub parse_inout {
	my $self = shift;
	my $src = $self->{src};
	my @io;

	$self->find_keyword('\[');
	say 'found [';
	$self->find_next_token;
	while ($$src !~ /\G\]/cgms) {
		my $name = $self->parse_ident;
		my $type = $self->parse_ident;
		my $default;
		$self->find_next_token;
		if ($$src !~ /\G;/cgms) {
			$default = $self->parse_ident;
		} 
		$self->find_keyword(';');
		say 'name ', $name, ' type ', $type, ' default ', $default // '<undef>';
		push @io, [$name, $type, $default];
		$self->find_next_token;
	}

	$self->{pos} = pos $$src;
	return bless \@io, 'inout';
}

sub parse_do {
	my $self = shift;
	my $src = $self->{src};
	my @do;

	$self->find_keyword('\[');
	say 'found [';

	while ( my $found = $self->find_keyword(qw(
			call case eval goto if label lock raise_error raise_event repeat split
			subscribe try unlock unsubscribe wait_for_child wait_for_event while \]
		)) ) {
		say 'found keyword ', $found;
		last if $found eq '\]';
		$found = "parse_$found";
		push @do, $self->$found();
	}

	print 'do: ', Dumper(\@do);
	return bless \@do, 'do';
}

sub parse_wfomap {
	my $self = shift;
	$self->{wfomap} = $self->parse_codeblock;
}

#################################################
#
# third level
#
sub parse_call {
	my $self = shift;

	my $call = bless {}, 'call';
	$call->{what} = $self->parse_ident;
	say 'call: ', $call->{what};

	$self->find_keyword('\[');
	say 'found [';

	while ( my $found = $self->find_keyword(qw(imap omap \])) ) {
		say 'found keyword ', $found;
		last if $found eq '\]';
		my $func = "parse_$found";
		$call->{$found} = $self->parse_codeblock;
	}

	print 'call: ', Dumper($call);
	return $call;
}

sub parse_case {
	my $self = shift;
	my $src = $self->{src};

	my $case = bless { cases => [] }, 'case';
	$case->{condition} = $self->parse_codeblock;
	$self->find_keyword('\[');

	while ( my $found = $self->find_keyword(qw(when else \])) ) {
		say 'found keyword ', $found;
		if ( $found eq '\]' ) {
			last;
		} elsif ($found eq 'when') {
			push @{$case->{cases}}, $self->parse_when;
		} elsif ($found eq 'else') {
			if ($case->{else}) {
				die 'JCP: duplicate else';
			}
			$case->{else} = $self->parse_do; # recursion
		}
	}

	unless (scalar @{$case->{cases}} > 0) {
		die 'JCP: case without when cases';
	}

	print 'case: ', Dumper($case);
	return $case;
}

sub parse_eval {
	my $self = shift;
	my $eval = bless {}, 'eval';
	$eval->{evalcode} = $self->parse_codeblock;
	print 'eval: ', Dumper($eval);
	return $eval;
}

sub parse_goto {
	my $self = shift;
	my $goto = bless {}, 'goto';
	$goto->{label} = $self->parse_ident;
	$self->find_keyword(';');
	print 'goto: ', Dumper($goto);
	return $goto;
}

sub parse_if {
	my $self = shift;
	my $src = $self->{src};

	my $if = bless {}, 'if';
	
	$if->{condition} = $self->parse_codeblock;
	$self->find_keyword('then');
	$if->{then} = $self->parse_do; # recursion

	# check for else block
	$self->find_next_token;
	if ( $$src =~ /\Gelsif/cgms ) {
		$self->{pos} = pos $$src;
		$if->{else} = $self->parse_if; # recursion
	} elsif ( $$src =~ /\Gelse/cgms ) {
		$self->{pos} = pos $$src;
		$if->{else} = $self->parse_do; # recursion
	}

	print 'if: ', Dumper($if);
	return $if;
}

sub parse_label {
	my $self = shift;
	my $label = bless {}, 'label';
	my $labeltext = $self->parse_ident;
	$label->{label} = $labeltext;
	$self->{labels}->{$labeltext} = undef;
	$self->find_keyword(';');
	print 'label ', Dumper($label);
	return $label;
}

sub parse_lock {
	my $self = shift;
	my $lock = bless {}, 'lock';
	$lock->{lock} = $self->parse_codeblock;
	print 'lock: ', Dumper($lock);
	return $lock;
}

sub parse_raise_error {
	my $self = shift;
	my $raise = bless {}, 'raise_error';
	$raise->{error} = $self->parse_codeblock;
	print 'raise: ', Dumper($raise);
	return $raise;
}

sub parse_raise_event {
	my $self = shift;
	my $raise = bless {}, 'raise_event';
	$raise->{event} = $self->parse_codeblock;
	print 'raise: ', Dumper($raise);
	return $raise;
}

sub parse_repeat {
	my $self = shift;

	my $repeat = bless {}, 'repeat';

	$repeat->{block} = $self->parse_do; # recursion
	$self->find_keyword('until');
	$repeat->{condition} = $self->parse_codeblock;

	print 'repeat: ', Dumper($repeat);
	return $repeat;
}

sub parse_split {
	my $self = shift;
	my $split = bless [], 'split';
	$self->find_keyword('\[');
	#say 'found [';
	while ( my $found = $self->find_keyword(qw(callflow \])) ) {
		#say 'found keyword ', $found;
		last if $found eq '\]';
		push @$split, $self->parse_call;
	}
	print 'wait_for_event: ', Dumper($split);
	return $split;
}

sub parse_subscribe {
	my $self = shift;
	my $sub = bless {}, 'subscribe';
	$sub->{event} = $self->parse_codeblock;
	print 'subscribe: ', Dumper($sub);
	return $sub;
}

sub parse_try {
	my $self = shift;
	my $src = $self->{src};

	my $try = bless {}, 'try';

	$try->{tryblock} = $self->parse_do; # recursion
	$self->find_keyword('catch');
	$try->{catchblock} = $self->parse_do;

	print 'try: ', Dumper($try);
	return $try;
}

sub parse_unlock {
	my $self = shift;
	my $unlock = bless {}, 'unlock';
	$unlock->{lock} = $self->parse_codeblock;
	print 'unlock: ', Dumper($unlock);
	return $unlock;
}

sub parse_unsubscribe {
	my $self = shift;
	my $unsub = bless {}, 'unsubscribe';
	$unsub->{eventname} = $self->parse_codeblock;
	print 'unsubscribe: ', Dumper($unsub);
	return $unsub;
}

sub parse_wait_for_event {
	my $self = shift;
	my $wait = bless {}, 'wait_for_event';
	$self->find_keyword('\[');
	#say 'found [';
	while ( my $found = $self->find_keyword(qw(imap omap \])) ) {
		say 'found keyword ', $found;
		last if $found eq '\]';
		$wait->{$found} = $self->parse_codeblock;
	}
	print 'wait_for_event: ', Dumper($wait);
	return $wait;
}

sub parse_while {
	my $self = shift;

	my $while = bless {}, 'while';
	
	$while->{condition} = $self->parse_codeblock;
	$self->find_keyword('do');
	$while->{block} = $self->parse_do; # recursion

	print 'while: ', Dumper($while);
	return $while;
}

#################################################
#
# fourth level
#
sub parse_codeblock {
	my $self = shift;
	my $src = $self->{src};
	$self->find_next_token;
	#say 'next up: |', substr $$src, , pos $$src, 10;
	unless ($$src =~ /\G\[(\w*)\[/cmsg ) {
		die 'JCP: expected begin of code block marker';
	}

	my $marker = $1;
	#say 'got marker ', $1, ' pos ', pos $$src;
	unless ($$src =~ /\G(.*?)\]$marker\]/cgms) {
		die 'JCP: could not find end marker of code block';
	}
	say 'code block: ', $1;
	$self->{pos} = pos $$src;

	my $block = $1;
	$block =~ s/^\s*(.*?)\s*$/$1/gms;

	return $block;
}

sub parse_ident {
	my $self = shift;
	$self->find_next_token;
	my $src = $self->{src};
	# first try a simple unquoted word
	if ($$src =~ /\G(\w+)/cmsg ) {
		$self->{pos} = pos $$src;
		return $1;
	}
	# maybe it's quoted then?
	my $match;
	unless ( $match = (extract_delimited($$src, '\'"'))[0] ) {
		pos $$src = $self->{pos}; # dunno if extract resets pos on fail
		die "JCP: expected identier: $@ at " . substr($$src, $self->{pos}, 10);
	}
	$self->{pos} = pos $$src;
	# now remove outer quotes
	$match =~ s/^(['"])(.*)\1$/$2/;
	return $match;
}

sub parse_when {
	my $self = shift;
	my $src = $self->{src};
	my $when = bless {}, 'when';
	my @cases;
	do {
		$self->{pos} = pos $$src;
		my $case = $self->parse_ident;
		push @cases, $case;
		say 'found case ', $case;
		$self->find_next_token;
	} while ( $$src =~ /\G,/cmsg );
	$self->{pos} = pos $$src;
	$when->{cases} = \@cases;
	$when->{block} = $self->parse_do;

	print 'when: ', Dumper($when);
	return $when;
}


#################################################
#
# helpers
#
sub find_keyword {
	my ($self, @kw) = @_;
	$self->find_next_token;
	my $src = $self->{src};
	if (my $found = first { $$src =~ /\G$_/cmsg } @kw ) {
		$self->{pos} = pos $$src;
		return $found;
	}
	die 'JCP: expected keyword ' . join(', ', @kw) . ' not found';
}

#
# search for the next token from the current posiotion
# skipping whitespace and comments
# set the position to the next token
#
sub find_next_token {
	my $self = shift;
	my $src = $self->{src} or die 'no source?';
	my $pos = $self->{pos} // 0;
	pos $$src = $pos;

	# find next non whitespace
	while (	$$src =~ /\G\s*/cgms ) {
		#$pos = pos $$src;
		if ($$src =~ /\G#\[(\w*)\[/cgms) {
			# multiline comment.. skip untill end marker
			my $marker = $1;
			#say 'got marker ', $1, ' pos ', pos $$src;
			unless ($$src =~ /\G(.*?)#\]$marker\]/cgms) {
				die 'JCP: could not find end marker of multiline comment';
			}
			say 'skipped multiline comment ', $1;
		} elsif ($$src =~ /\G#(.*?)$/cgms) {
			# matched a single line comment
			say 'skipped comment ', $1;
		}
		$pos = pos $$src;
	}
	#say 'find_next_token: pos now ', $pos;
	$self->{pos} = $pos;
}

#################################################
#
# error handler
#
sub error {
	my ($self, $error) = @_;
	my $src = $self->{src} // '';
	my $pos = $self->{pos} // 0;
	my $line = 0;
	my @linepos = (0);

	pos $$src = 0; # from the top
	while ($$src =~ /$/gsm){
		push @linepos, $-[0];
	}

	#say 'pos: ', $pos, ' lines: ', join(', ', @linepos);

	for my $l (0..$#linepos) {
		if ($linepos[$l] > $pos) {
			# this works because the array is 0-based
			# but we count lines from 1
			$line = $l;
			$pos = $pos - $linepos[$l-1];
			last;
		}
	}

	if ( $error =~ /^JCP:/ ) {
		$error =~ s/^JCP: (.+) at (.+)$/$1/s;
		die "$error at line $line pos $pos near '" . substr($$src, $self->{pos} // 0, 10) . "'\n";
	}
	die $error;
}

#################################################
#
# code generator
#
package JobCenter::CodeGenerator;

use Mojo::Base -base;
use Mojo::Util qw( quote );
use Data::Dumper;
use Scalar::Util qw( blessed );

use constant {
	T_START => 0,
	T_END => -1,
	T_NO_OP => -2,
	T_EVAL => -3,
	T_BRANCH => -4,
	T_SWITCH => -5,
	T_REAP_CHILD => -6,
	T_SUBSCRIBE => -7,
	T_UNSUBSCRIBE => -8,
	T_WAIT_FOR_EVENT => -9,
	T_RAISE_ERROR => -10,
	T_RAISE_EVENT => -11,
	T_WAIT_FOR_CHILDREN => -12,
	T_LOCK => -13,
	T_UNLOCK => -14,
};

sub new {
	my ($class, $db, $tags) = @_;
	my $self = bless {
		wfid => undef,  # workflow_id
		db => $db,	# db connection to use
		tags => $tags,	# version tags
		oetid => undef, # current on_error_task_id
		labels => {},	# labels to be filled with task_ids
		fixup => [],	# list of tasks that need the next_task set
				# format: list of task_id, target label
	}, $class;
	return $self;
}

sub generate {
	my ($self, $wf) = @_;
	die 'not a workflow' unless blessed($wf) eq 'workflow';
	
	$self->{oetid} = undef;
	$self->{labels} = $wf->{labels};
	$self->{fixup} = [];

	say "\nbegin";
	my $tx  = $self->{db}->begin;

	my $version = 1;
	# find out if a version alreay exists, if so increase version
	# FIXME: race condition when multiples jcc's compile the same wf at the same time..
	{
		my $res = $self->{db}->dollar_only->query(
			q|select version from actions where name = $1 and type = 'workflow' order by version desc limit 1|, 
			$wf->{name}
		)->array;
		print 'res: ', Dumper($res);
		if ( $res and @$res and @$res[0] >= 0 ) {
			$version = @$res[0] + 1;
		}
	}

	my $wfid = $self->qs(
		q|insert into actions (name, type, version, wfmapcode) values ($1, 'workflow', $2, $3) returning action_id|, 
		$wf->{name}, $version, $wf->{wfomap}
	);
	$self->{wfid} = $wfid;
	say "wfid: $wfid";

	# use a fake returning clause to we can reuse our qs function	
	for my $in (@{$wf->{in}}) {
		$self->qs(
			q|insert into action_inputs (action_id, name, type, optional, "default") values ($1, $2, $3, $4, $5) returning action_id|,
			$wfid, $$in[0], $$in[1], ($$in[2] ? 'true' : 'false'), $$in[2]
		);
	}

	for my $out (@{$wf->{out}}) {
		$self->qs(
			q|insert into action_outputs (action_id, name, type, optional) values ($1, $2, $3, $4) returning action_id|,
			$wfid, $$out[0], $$out[1], (($$out[2] && $$out[2] eq 'optional') ? 'true' : 'false')
		);
	}

	if ($self->{tags}) {
		for my $tag (split /:/, $self->{tags}) {
			$self->qs(
				q|insert into action_version_tags (action_id, tag) values ($1, $2) returning action_id|,
				$wfid, $tag
			);
		}
	}

	my ($first, $last) = $self->gen_do($wf->{do}); # first and last task_id of block

	my $start = $self->instask(T_START, next_task_id => $first); # magic start task to first of block
	my $end = $self->instask(T_END); # magic end task
	$self->set_next($last, $end); # block to end task
	$self->set_next($end, $end); # next_task_id may not be null

	# fixup labels (of gotos)
	foreach my $fixup (@{$self->{fixup}}) {
		my ($tid, $label) = @$fixup;
		my $dst = $self->{labels}->{$label} or die "cannot find label $label";
		$self->set_next($tid, $dst);
	}

	# maybe move this to a deferred trigger on actions?
	$self->qs(q|select sanity_check_workflow($1)|, $wfid);

	say "commit";
	$tx->commit;
}

### top level keyword generators ###

sub gen_do {
	my ($self, $todo) = @_;
	my ($first, $cur); # first tid of this block, last tid of this block
	for my $do (@$todo) {
		my ($f, $l);
		if (my $what = blessed($do)) {
			$what = "gen_$what";
			($f, $l) = $self->$what($do);
		} else {
			print Dumper($do);
			die "unblessed block";
		}
		die "no first tid?" unless $f;
		$first = $f unless $first;
		$self->set_next($cur, $f) if $cur;
		$cur = $l;
		# if $l is undef then the goto took cate of the next_task_id of $l
		# so we must not touch it here
	}
	return ($first, $cur);
}

sub gen_call {
	my ($self, $call) = @_;
	#my $aid = $self->qs( q|select action_id from actions where name = $1|, $call->{what});
	# resolve calls to actions and workflows with the same tags we are compiling with
	my $tags = '{default}';
	# FIXME: would there be any logical reason to have default in the search path
	#        and not have it at the last position?
	if ($self->{tags} and $self->{tags} ne 'default') {
		my @tags = split /:/, $self->{tags};
		push @tags, 'default';
		$tags = '{' . join(',', @tags) . '}';
	}

	my $aid = $self->qs( <<'EOF', $call->{what}, $tags);
SELECT
	action_id
FROM
	actions
	LEFT JOIN action_version_tags USING (action_id)
WHERE
	name = $1
	AND (tag = ANY($2) OR tag IS NULL)
	ORDER BY array_position($2, tag), version DESC LIMIT 1;
EOF

	die "action $call->{what} not found?" unless $aid;

	my $imap = $call->{imap} // '';
	my $omap = $call->{omap} // '';
	my $tid = $self->instask($aid, imapcode => $imap, omapcode => $omap);
	return ($tid, $tid);
}

sub gen_case {
	my ($self, $case) = @_;

	my $casetid = $self->instask(T_SWITCH, casecode => $case->{condition}); # case
	my $endcasetid = $self->instask(T_NO_OP); # dummy task to tie things together

	for my $when (@{$case->{cases}}) {
		my ($whenf, $whenl) = $self->gen_do($when->{block});
		for my $match (@{$when->{cases}}) {
			$self->qs(q|insert into next_tasks values($1, $2, $3) returning from_task_id|, $casetid, $whenf, $match);
		}
		$self->set_next($whenl, $endcasetid); # when block to end case
	}
	if ($case->{else}) {
		my ($ef, $el) = $self->gen_do($case->{else});
		# we store the else branch in the next_task_id field
		$self->set_next($casetid, $ef); # case to else block
		$self->set_next($el, $endcasetid); # else block to end case
	} else {
		$self->set_next($casetid, $endcasetid); # straight to the exit
	}
	return ($casetid, $endcasetid);
}	

sub gen_if {
	my ($self, $if) = @_;

	my $iftid = $self->instask(T_BRANCH, casecode => $if->{condition}); # if
	my $endiftid = $self->instask(T_NO_OP); # dummy task to tie things together

	my ($tf, $tl) = $self->gen_do($if->{then});
	$self->qs(q|insert into next_tasks values($1, $2, 'true') returning from_task_id|, $iftid, $tf);
	$self->set_next($tl, $endiftid); # then block to end if

	if ($if->{else}) {
		my ($ef, $el) = $self->gen_else($if->{else});
		$self->set_next($iftid, $ef); # if to else block
		$self->set_next($el, $endiftid); # else block to end if
	} else {
		$self->set_next($iftid, $endiftid); # no else, straigth to end if
	}
	return ($iftid, $endiftid);
}	

sub gen_else {
	my ($self, $else) = @_;
	my $what = blessed($else);
	my ($first, $last);
	if ($what eq 'if') {
		# if then elsif ..
		($first, $last) = $self->gen_if($else);
	} elsif ($what eq 'do') {
		# just plain else
		($first, $last) = $self->gen_do($else);
	} else {
		die "got else block with $what subtree";
	}
	#say "gen_else: first $first last $last";
	return ($first, $last);
}
	
sub gen_eval {
	my ($self, $eval) = @_;
	my $evaltid = $self->instask(T_EVAL, imapcode => $eval->{evalcode}); # eval
	return ($evaltid, $evaltid);
}

sub gen_goto {
	my ($self, $goto) = @_;
	my $gototid = $self->instask(T_NO_OP); # use a no_op to set the next_task_id of
	my $labeltext = $goto->{label};
	die "goto: unknown label $labeltext" unless exists $self->{labels}->{$labeltext};
	push @{$self->{fixup}}, [ $gototid, $labeltext ];
	# return undef so gen_do does not meddle with the next_task_id
	return ($gototid, undef);
}

sub gen_label {
	my ($self, $label) = @_;
	my $labeltid = $self->instask(T_NO_OP); # use a no_op as destination
	my $labeltext = $label->{label};
	die "unknown label $labeltext" unless (exists $self->{labels}->{$labeltext});
	die "duplicate label $labeltext" if $self->{labels}->{$labeltext};
	$self->{labels}->{$labeltext} = $labeltid;
	return ($labeltid, $labeltid);	
}

sub gen_lock {
	my ($self, $lock) = @_;
	my $tid = $self->instask(T_LOCK, imapcode => $lock->{lock});
	return ($tid, $tid);
}

sub gen_raise_error {
	my ($self, $raise) = @_;
	my $raisetid = $self->instask(T_RAISE_ERROR, imapcode => $raise->{error});
	return ($raisetid, $raisetid);
}

sub gen_raise_event {
	my ($self, $raise) = @_;
	my $raisetid = $self->instask(T_RAISE_EVENT, imapcode => $raise->{event});
	return ($raisetid, $raisetid);
}

sub gen_repeat {
	my ($self, $repeat) = @_;
	my ($bf, $bl) = $self->gen_do($repeat->{block}); # repeat <block> until ...
	my $untiltid = $self->instask(T_BRANCH, casecode => $repeat->{condition}, next_task_id => $bf); # until with repeat block as default (else) next_task_id
	$self->set_next($bl, $untiltid); # repeat block to until
	my $endtid = $self->instask(T_NO_OP); # dummy task to tie things together
	$self->qs(q|insert into next_tasks values($1, $2, 'true') returning from_task_id|, $untiltid, $endtid); # until to end
	return ($bf, $endtid);
}

sub gen_split {
	my ($self, $split) = @_;
	my (@childtids, $firsttid, $lasttid);
	# first start all childsflows in order, with wait = false
	for my $flow (@$split) {
		my $aid = $self->qs( q|select action_id from actions where name = $1 and type = 'workflow'|, $flow->{what});
		my $tid = $self->instask($aid, imapcode => $flow->{imap} // '', omapcode => $flow->{omap} // '', wait => 0);
		push @childtids, $tid;
		$firsttid = $tid unless $firsttid;
		$self->set_next($lasttid, $tid) if $lasttid;
		$lasttid = $tid;
	}
	# now wait for all chilflows
	my $wfctid = my $tid = $self->instask(T_WAIT_FOR_CHILDREN);
	$self->set_next($lasttid, $wfctid);
	$lasttid = $wfctid;
	# now reap all childflows, in order
	for my $ct (@childtids) {
		my $tid = $self->instask(T_REAP_CHILD, reapfromtask_id => $ct);
		$self->set_next($lasttid, $tid); # $lasttid should be set
		$lasttid = $tid;
	}
	return ($firsttid, $lasttid);
}

sub gen_subscribe {
	my ($self, $sub) = @_;
	my $tid = $self->instask(T_SUBSCRIBE, imapcode => $sub->{event});
	return ($tid, $tid);
}

sub gen_try {
	my ($self, $try) = @_;
	my $endtid = $self->instask(T_NO_OP); # dummy task to tie things together
	my ($cbf, $cbl) = $self->gen_do($try->{catchblock}); # catch block
	$self->set_next($cbl, $endtid); # catch block to end
	my $oetid = $self->{oetid};
	$self->{oetid} = $cbf;
	my ($tbf, $tbl) = $self->gen_do($try->{tryblock}); # try block
	$self->set_next($tbl, $endtid); # try block to end
	$self->{oetid} = $oetid; # ? $oetid : undef; # prevent undef warnings
	return ($tbf, $endtid);
}

sub gen_unlock {
	my ($self, $unlock) = @_;
	my $tid = $self->instask(T_UNLOCK, imapcode => $unlock->{lock});
	return ($tid, $tid);
}

sub gen_unsubscribe {
	my ($self, $unsub) = @_;
	my $tid = $self->instask(T_UNSUBSCRIBE, imapcode => $unsub->{eventname});
	return ($tid, $tid);
}

sub gen_wait_for_event {
	my ($self, $wait) = @_;
	my $imap = $wait->{imap} // '';
	my $omap = $wait->{omap} // '';
	my $tid = $self->instask(T_WAIT_FOR_EVENT, imapcode => $imap, omapcode => $omap);
	return ($tid, $tid);
}

sub gen_while {
	my ($self, $while) = @_;
	my $whiletid = $self->instask(T_BRANCH, casecode => $while->{condition}); # while test
	my $endwhiletid = $self->instask(T_NO_OP); # dummy task to tie things together
	my ($bf, $bl) = $self->gen_do($while->{block});
	# while test do <block>
	$self->qs(q|insert into next_tasks values($1, $2, 'true') returning from_task_id|, $whiletid, $bf);
	$self->set_next($bl, $whiletid); # while block back to while test
	$self->set_next($whiletid, $endwhiletid); # false, while test to end while
	return ($whiletid, $endwhiletid);
}

### helpers ###

sub instask {
	my ($self, $aid, %args) = @_;
	die "no workflow_id" unless $self->{wfid};
	die "no action_id" unless defined $aid; # action_id 0 is valid ;)
	my ($f, $v);
	my @f = qw( workflow_id action_id on_error_task_id );
	my @v = ($self->{wfid}, $aid, $self->{oetid});
	while (my ($f,$v) = each %args) {
		push @f, $f;
		push @v, $v;
	}
	my $n = 1;
	my $q = 'insert into tasks (' . join(',', @f) . ') values (' . join(',', map { '$' . $n++ } 1 .. scalar @v) . ') returning task_id';
	return $self->qs($q, @v);
}

# query with single return value
sub qs {
	my ($self, $q, @a) = @_;
	my $as = join(',', map { $_ // '' } @a);
	my $res = $self->{db}->dollar_only->query($q, @a)->array;
	die "query $q [$as]failed" unless $res and @$res and @$res[0];
	say "query: $q [$as] => @$res[0]";
	return @$res[0];
}

sub set_next {
	my ($self, $f, $t) = @_;
	say "update tasks set next_task_id = $t where task_id = $f";
	my $res = $self->{db}->dollar_only->query(q|update tasks set next_task_id = $1 where task_id = $2|, $t, $f);
	die "update next_task_id of task_id $f failed" unless $res;
}

