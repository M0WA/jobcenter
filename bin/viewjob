#!/usr/bin/perl -CSDL

use strict;
use warnings;
use 5.10.0;

# standard modules
use Data::Dumper;
use FindBin;

# non standard modules that should be available as packages even on rhel-6
use Config::Tiny;
use DBI;
use DBD::Pg qw(:async);
use JSON qw(decode_json encode_json);


# JobCenter
#use lib "$FindBin::Bin/../lib";
#use JobCenter::SimpleClient;

my $pgh;
my %actions;

exit main(@ARGV);

sub main {
	if (scalar @_ != 1) {
		die "usage: $0 <jobid>";
	}

	my ($job_id) = @_;

	my $cfgpath = "$FindBin::Bin/../etc/jobcenter.conf";

	my $cfg = Config::Tiny->read($cfgpath);
	die 'failed to read config ' . $cfgpath . ': ' . Config::Tiny->errstr unless $cfg;
	my $pgdsn = 'dbi:Pg:dbname=' . $cfg->{pg}->{db}
		. ';host=' . $cfg->{pg}->{host}
		. ';port=' . $cfg->{pg}->{port};
	my $pguser = $cfg->{admin}->{user};
	my $pgpass = $cfg->{admin}->{pass};

	# make our clientname the application_name visible in postgresql
	$ENV{'PGAPPNAME'} = "$0 [$$]";

	$pgh = DBI->connect(
		$pgdsn, $pguser, $pgpass,
		{
			AutoCommit => 1,
			RaiseError => 1,
			PrintError => 0,
		}
	) or die "cannot connect to db: $DBI::errstr";
	$pgh->{pg_placeholder_dollaronly} = 1;

	my $job = $pgh->selectrow_hashref(q[
		select
			workflow_id, state, arguments, environment, job_created, job_finished, out_args,
			age(job_finished, job_created) as took
		from jobs where job_id=$1
		union all select
			workflow_id, state, arguments, environment, job_created, job_finished, out_args,
			age(job_finished, job_created) as took
		from jobs_archive where job_id=$2],
		{},
		$job_id, $job_id
	);

	die "no job $job_id?" unless $job;

	my $wfname = $pgh->selectrow_array(
		q[select name from actions where action_id = $1],
		{},
		$job->{workflow_id}
	);

	say '';
	say "job $job_id workflow \"$wfname\"";
	say "    arguments   $job->{arguments}";
	say "    environment $job->{environment}" if $job->{environment};
	say "    started at  $job->{job_created}";

	my $sth = $pgh->prepare(
		q[select
			*,
			extract(epoch from age(task_started, task_entered)) as delay,
			extract(epoch from age(task_completed, task_started)) as duration
		 from job_task_log where job_id=$1 order by job_task_log_id]
	);
	$sth->execute($job_id) or die "oergh";

	my $steps = ' 1';

	while ( my $jt = $sth->fetchrow_hashref ) {
		my ($type, $name) = get_action($jt->{task_id});
		#print Dumper($jt);
		say '---------------------------------------------------------';
		if ($type eq 'system') {
			say "step $steps $name";
		} else {
			say "step $steps call $type $name delay $jt->{delay} duration $jt->{duration}";
		}	
		say "        inargs  $jt->{task_inargs}" if $jt->{task_inargs};
		say "        outargs $jt->{task_outargs}" if $jt->{task_outargs};
		say "        newvars $jt->{variables}" if $jt->{variables};
		$steps = sprintf "%2d", $steps + 1;
	}
	$sth = undef;

	say '---------------------------------------------------------' if $steps > 1;

	#say Dumper($job);
	say "job state $job->{state}";
	say "    finished at $job->{job_finished} took $job->{took}" if $job->{job_finished};
	say "    result      $job->{out_args}" if $job->{out_args};
	say '';

	return 0;
}


sub get_action {
	my $task_id = shift;
	unless ($actions{$task_id}) {
		my ($type, $name) = $pgh->selectrow_array(
			q[select type, name from tasks join actions using (action_id) where task_id = $1],
			{},
			$task_id
		);
		die "no task $task_id?" unless $type and $name;		
		$actions{$task_id} = [$type, $name];
	}
	return @{$actions{$task_id}};
}


