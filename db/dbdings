#!/usr/bin/perl

use Mojo::Base -base;
use FindBin;
#use lib "$FindBin::Bin/../lib";
use Mojo::Util qw( slurp );
use Mojo::Pg;

use Data::Dumper;
use Digest::MD5 qw(md5_hex);

use Config::Tiny;

exit main(@ARGV);

# ugly but handy globals
our ($cfg, $pg, $allprocsq, $procsrcq, $reposchema, $dbschema);

sub main {
	my %actions = (
		'check' => \&checkschema,
		'compare' => \&compprocs,
		'create' => \&createschema,
		'downgrade' => \&downgradeschema,
		#'dump' => \&dumpprocs, 
		'help' => \&help,
		'load' => \&loadproc,
		'save' => \&saveproc,
		'update' => \&updateprocs,
		'upgrade' => \&upgradeschema,
		'verify' => \&verifyschema,
	);
	
	my %commands = (
		'compprocs' => \&compprocs,
		'loadproc' => \&loadproc,
		'saveproc' => \&saveproc,
	);
	
	($0) = ($0 =~ m|/?(\w+)$|);

	my $handler = $commands{$0};

	$handler = $actions{shift @_ // 'help'} unless $handler;

 	die "$0: don't know what to do" unless $handler;

	$cfg = Config::Tiny->read("$FindBin::Bin/../etc/jobcenter.conf");
	#$cfg = Config::Tiny->read('../etc/jc2.conf');
	die 'Config Errror: ' . Config::Tiny->errstr() unless $cfg;
	#print Dumper($cfg);

	$ENV{'PGAPPNAME'} = $0;
	$pg = Mojo::Pg->new(
		'postgresql://'
		. $cfg->{admin}->{user}
		. ':' . $cfg->{admin}->{pass}
		. '@' . $cfg->{pg}->{host}
		. ':' . $cfg->{pg}->{port}
		. '/' . $cfg->{pg}->{db}
	);

	chdir($FindBin::Bin) or die "cannot chdir to $FindBin::Bin";

	return &$handler(@_);
}

sub help {
	print <<'EOF';
dbdings usage: dbdings <command>
Schema management commands:
	check:           check schema version in db and repo
	create:          create schema in db
	downgrade <ver>: try to downgrade db schame version to <ver>
	upgrade:         try to upgrade db schema version to repo version
	verify:          verify latest schema upgrade
Stored procedure management commands:
	compare:         compare version between db and repo
	load <proc>:     load <proc> from repo into db
	save <proc>:     save <proc> from db to repo
	update:          update procs in db from repo

EOF
}

sub checkdbschema {
	my $res;
	my $db = $pg->db;
	{
		# don't panic if the _schema table does not exist yet
		local $db->dbh->{RaiseError} = 0;
		#local $db->dbh->{PrintError} = 1;
		$res = $db->query(q|select version from _schema|);
	}
	if ($res->sth->err) {
		say "db schema version not found: ", $res->sth->errstr;
		return undef;
	}
	$res = $res->array;
	$res = $$res[0];
	say 'db schema version ', $res // 'undef';
	$dbschema = $res;
}

sub checkreposchema {
	my $tag = `git describe`;
	die "no git tag found" unless $tag;
	unless ($tag =~ /^schema_v([0-9.]+)/) {
		die "weird tag $tag";
	}
	$tag = $1;
	say "found repo schema version $tag";
	$reposchema = $tag;
}


sub findschemaupgrades {
	my @scripts = sort grep { -f $_ or die "$_ not found" } <schema/v*/{alter,verify}.sql>;
	@scripts = grep { my ($v) = $_ =~ m|/v([0-9.]+)/|; $v gt $dbschema and $v le $reposchema } @scripts;
	#say 'found scripts: ', join(', ', @scripts);
	return @scripts;
}

sub checkschema {
	checkdbschema();
	checkreposchema();
	unless (defined $dbschema) {
		die "need to create the schema from scratch\n" .
		    "call $0 create to do that";
	}
	if ($reposchema lt $dbschema) {
		die "fileschema is lower than dbschema ($reposchema < $dbschema)\n" .
		    "downgrade dbschema before reverting repo";
	}
	if ($reposchema gt $dbschema) {
		my @scripts = findschemaupgrades;
		die 'upgrade scripts not found?' unless @scripts;
		say 'need to do scripts ', join(', ', @scripts), ' for upgrade';
		return 1;
	}		
	if ($reposchema eq $dbschema) {
		say "schema is up to date";
		return 0;
	}
	die "how did we get here?";
}

sub createschema {
	checkdbschema();
	die "db already exists?" if $dbschema;
	checkreposchema();
	say "need to create schema v$reposchema";
	
	# find the most recent create scripts
	my @scripts = (
		grep { $_ } # only defined items
		map {
			# try to find create script in dir
			my @f = grep { -f $_ } <$_/{create{1,2},verify}.sql>;
			if ($#f == 2) {
				[ $f[0], $f[1], $f[2] ]
			} else {
				#say 'no scripts in ', $_;
				undef;
			}
		}
		sort # in ascending order
		grep {
			my ($v) = $_ =~ m|^schema/v([0-9.]+)$|;
			-d $_ and $v and $v le $reposchema
		}
		<schema/v*>
	)[-1]; # we only want the newest version create scripts
	#print "scripts: ", Dumper(\@scripts);

	($dbschema) = ($scripts[0][0] =~ m|^schema/v([0-9.]+)/|) or die "cannot find script version";
	
	say 'need to do ', join(', ', map { (ref) ? join(', ', @$_) : $_ } @scripts);
	
	my @sqls;
	for (@scripts) {
		if (ref) {
			push @sqls, sqlfile(@$_[0]); # create1
			push @sqls, procs("schema/v$dbschema/procs");
			push @sqls, sqlfile(@$_[1]); # create1
			push @sqls, sqlfile(@$_[2]); # verify
		} else {
			push @sqls, sqlfile($_);
		}
	}
	my $res = execsql(\@sqls);
	die 'create failed' if $res;

	if ($dbschema lt $reposchema) {
		say "created schema version $dbschema, now upgrading to $reposchema";
		return upgradeschema();
	}
	say "created schema version $dbschema";
	return 0;
}

sub upgradeschema {
	unless (checkschema()) {
		say "nothing to upgrade?";
		return 0;
	}
	my @scripts = findschemaupgrades($reposchema, $dbschema);
	
	say 'need to do ', join(', ', @scripts);

	my @sqls;
	push @sqls, sqlfile($_) for @scripts;
	my $res = execsql(\@sqls);
	
	die "upgrade failed" if $res;

	$pg->db->query(q|update _schema set version = $1|, $reposchema);
	# FIXME: check update?

	say "upgraded to $reposchema";
	return 0	
}	

sub downgradeschema {
	my $want = shift;
	die "downgrade to what version?" unless $want;
	checkschema();
	die "want version bigger than repo version" if $want ge $reposchema;
	if ($dbschema eq $want) {
		say "already on db schema version $dbschema, nothing to do";
		return 0;
	}

	my @scripts = sort grep { -f $_ } <schema/v*/downgrade.sql>;
	@scripts = grep { my ($v) = $_ =~ m|/v([0-9.]+)/|; $v gt $want and $v le $dbschema } @scripts;
	die 'nothing to do?' unless @scripts;
	say 'need to do ', join(', ', @scripts);

	# FIXME: check that downgrades form a sequence

	my @sqls;
	push @sqls, sqlfile($_) for @scripts;
	my $res = execsql(\@sqls);
	
	die "downgrade failed" if $res;

	$pg->db->query(q|update _schema set version = $1|, $want);
	# FIXME: check update?

	say "downgraded to $want";
	return 0
}


sub verifyschema {
	if (checkschema() != 0) {
		say "nothing to verify? may need to upgrade first";
		return 0;
	}

	my @scripts =  sort <schema/v$reposchema/verify.sql>;

	say 'need to do ', join(', ', @scripts);

	my @sqls;
	push @sqls, sqlfile($_) for @scripts;

	my $res = execsql(\@sqls);
	die "verify failed" if $res;

	return 0;
}	


sub execsql {
	my ($sqls, $check) = @_;

	$check = ($check) ? 'true' : 'false';

	unshift @$sqls, \<<"EOF";

-- default header
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET client_min_messages = warning;
SET check_function_bodies = $check;
SET statement_timeout = 0;
SET lock_timeout = 0;
SET row_security = off;
-- end of default header
EOF

	#say "sql now: ", $sql;
	
	open my $fh, '|-', 'psql', '-w', '-e', '-1',
			'-v', 'ON_ERROR_STOP=1',
			'-h', ($cfg->{super}->{host} or die 'foo'),
			'-p', ($cfg->{super}->{port} or die 'fooo'),
			'-d', $cfg->{pg}->{db}
			#'-U', $cfg->{admin}->{user}
		or die "cannot start psql: $!";
	print $fh $$_ for @$sqls;
	close $fh;

	return $?;
}

sub sqlfile {
	my $f = shift;
	#my $dbname = $cfg->{pg}->{db};
	#my $cluster = $cfg->{pg}->{cluster};

	my $sql = slurp $f;
	
	my %subs = (
		'$JCADMIN' => ($cfg->{admin}->{user} or die "foo"),
		'$JCCLIENT' => ($cfg->{client}->{user} or die "fooo"),
		'$JCMAESTRO' => ($cfg->{maestro}->{user} or die "foooo"),
		'$JCSYSTEM' => ($cfg->{system}->{role} or die "fooooo")
	);

	while ( my($k,$v) = each(%subs) ) {
		$sql =~ s/\Q$k\E/$v/g;
	}

	return \$sql;
}

sub procs {
	my $procdir = shift;
	my $jcsystem = ($cfg->{system}->{role} or die "fooooo"); 
	my @funcs;

	for my $p (<$procdir/*.sql>) {
		say "doing $p";
		my $func .= slurp $p;
		my ($funcname) = $func  =~ /FUNCTION\s+(.*)\s+RETURNS/ms;
		die "cannot find funcname in $p" unless $funcname;
		
		#$func .= ';'
		$func .= <<EOF;
;
ALTER FUNCTION $funcname SET search_path = jobcenter, pg_catalog, pg_temp;
ALTER FUNCTION $funcname OWNER TO $jcsystem;

EOF
		push @funcs, \$func;

	}

	return @funcs;
}

sub dumpprocs {
	die "are you sure?";
	my $funcs = $pg->db->dollar_only->query($allprocsq, $cfg->{pg}->{db});
	
	while (my $f = $funcs->hash) {
		say "dumping $f->{name}";
		open my $o, '>', "procs/$f->{name}.sql" or die "urgh";
		print $o $f->{code};
		close $o; 
	}

	return 0;
}

sub compprocs {
	my @filefuncs = sort grep { -f $_ } <procs/*.sql>;

	my $diffs = 0;
				
	foreach my $fn (@filefuncs) {
		#say "fn: $fn";
		my ($f) = $fn =~ m|^procs/(.*)\.sql$|;
		my $dbmd5 = dbmd5($f);
		unless ($dbmd5) {
			#warn "no proc $f in the db?";
			$diffs++;
			next
		}
		my $procmd5 = procmd5($f);
		unless ($procmd5) {
			#warn "no proc $f in the procs table?";
			$diffs++;
			next;
		}
		my $filemd5 = md5sum($fn);
		if ($procmd5 ne $dbmd5 and $dbmd5 ne $filemd5 and $filemd5 ne $procmd5) {
			say "proc $f differs between db and procs table and file";
			$diffs += 3;
		} elsif ($dbmd5 eq $filemd5 and $filemd5 ne $procmd5) {
			say "proc $f procs table out of sync";
			$diffs++;
		} elsif ($filemd5 ne $procmd5) {
			say "proc $f differs between procs table and file";
			$diffs++;
		} elsif ($filemd5 ne $dbmd5) {
			say "proc $f differs between db and file";
			$diffs++;
		} else {
			#say " (did $f)";
		}
	}

	if ($diffs) {
		say "found $diffs differences";
	} else {
		say "no differences found";
	}

	return 0;
}

sub updateprocs {
	checkschema();
	die "dbschema $dbschema not equal to reposchema $reposchema" if $dbschema ne $reposchema;	
	
	#hmm.. reuse comprocs somehow?
	my @filefuncs = sort grep { -f $_ } <procs/*.sql>;

	my $updated = 0;
			
	foreach my $fn (@filefuncs) {
		#say "fn: $fn";
		my ($f) = $fn =~ m|^procs/(.*)\.sql$|;
		my $dbmd5 = dbmd5($f);
		my $procmd5 = procmd5($f);
		my $filemd5 = md5sum($fn);
		if (not $dbmd5 and not $procmd5) {
			say "loading new proc $f";
			loadproc($f);
			$updated++;
		} elsif ($dbmd5 and not $procmd5) {
			die "proc $f exists in db but not in procs table.\n".
			    "manual cleanup required.";
		} elsif (not $dbmd5 and $procmd5) {
			die "proc $f exists in procs table but not not in db.\n".
			    "manual cleanup required.";
		} elsif ($procmd5 ne $dbmd5 and $dbmd5 ne $filemd5 and $filemd5 ne $procmd5) {
			die "proc $f differs between db and procs table and file.\n".
			    "manual cleanup required.";
		} elsif ($dbmd5 ne $procmd5 and $dbmd5 eq $filemd5) {
			say "proc md5sum out of sync, updating";
			loadproc($f);
			$updated++;
		} elsif ($dbmd5 ne $procmd5) {
			die "proc $f differs between db and procs table.\n".
			    "manual cleanup required.";
		} elsif ($filemd5 ne $dbmd5) {
			say "loading modified proc $f from file";
			loadproc($f);
			$updated++;
		} else {
			# up to date ..
			#say " (did $f)";
		}
	}

	if ($updated) {
		say "updated $updated stored procedures";
	} else {
		say "no stored procedures were updated";
	}

	return 0;
}

sub loadproc {
	my $proc = shift;
	die "usage: loadproc <procname>" unless $proc;
	$proc = $1 if $proc =~ m|(?:procs/)?(.*)\.sql$|;
	die "$proc not found in procs dir" unless -f "procs/$proc.sql";

	my $procmd5 = procmd5($proc);

	# get the proc src
	my $dbprocsrc = $pg->db->dollar_only->query($procsrcq, $proc)->array;
	$dbprocsrc = ($dbprocsrc and @$dbprocsrc and $$dbprocsrc[0]) ? $$dbprocsrc[0] : undef;
	my $dbmd5 = ($dbprocsrc) ? md5_hex($dbprocsrc) : undef;
	my $procsrc = slurp("procs/$proc.sql");
	my $filemd5 = md5_hex($procsrc);

	die "proc $proc exists in db and not in proc table, refusing to load" if $dbmd5 and not $procmd5;
	die "proc $proc was changed in the db, refusing to load" if $dbmd5 and $procmd5 and $procmd5 ne $dbmd5 and $dbmd5 ne $filemd5;

	if ($procmd5 and $filemd5 eq $procmd5) {
		say "$proc is alread up-to-date";
		return 0;
	}

	# get function name
	$procsrc =~ /^CREATE OR REPLACE FUNCTION\s+(.*)\n\s+RETURNS\s+(.*)\n/m or die 'cannot parse file function definition';
	my $func = $1;
	my $funcsig = "$1 RETURNS $2";
	# ugh.. we need to filter out default arguments here
	# let's try a quick hack:
	$func =~ s/ DEFAULT .*?(,|\))/$1/g;

	if ($dbprocsrc) {
		# see if the function signature changed
		# we may need to drop the functio first
		$dbprocsrc =~ /^CREATE OR REPLACE FUNCTION\s+(.*)\n\s+RETURNS\s+(.*)\n/m or die 'cannot parse db function definition';
		my $dbfunc = $1;
		my $dbfuncsig = "$1 RETURNS $2";
		# ugh.. we need to filter out default arguments here
		# let's try a quick hack:
		$dbfunc =~ s/ DEFAULT .*?(,|\))/$1/g;

		if ($funcsig ne $dbfuncsig) {
			$procsrc = "DROP FUNCTION $dbfunc;\n" . $procsrc;
		}
	}

	# always set owner, not actually necessary when replacing a function..
	my $jcsystem = ($cfg->{system}->{role} or die 'no system role configured?');
	$procsrc .= <<"EOT";
;
ALTER FUNCTION $func OWNER TO $jcsystem;

EOT

	#$pg->db->dollar_only->query($procsrc);
	my $res = execsql( [ \$procsrc ], 1 ); # check function bodies
	die "loading $proc failed" if $res;
	
	if ($dbmd5) {
		$pg->db->dollar_only->query(q|update _procs set md5=$1 where "name"=$2|, $filemd5, $proc);
	} else {
		$pg->db->dollar_only->query(q|insert into _procs ("name", md5) values ($1, $2)|, $proc, $filemd5);
	}
}

sub saveproc {
	my $proc = shift;
	die "usage: saveproc <procname>" unless $proc;
	$proc = $1 if $proc =~ m|(?:procs/)?(.*)\.sql$|;
	my $flag = -f "procs/$proc.sql";
	warn "warnings: $proc not found in procs dir, new function?" unless $flag;

	my $dbprocsrc = $pg->db->dollar_only->query($procsrcq, $proc)->array;
	die "no proc $proc in the db?" unless $dbprocsrc and @$dbprocsrc and $$dbprocsrc[0];
	$dbprocsrc = $$dbprocsrc[0];

	my $dbmd5 = md5_hex($dbprocsrc);

	open my $procfd, '>', "procs/$proc.sql" or die "Cannot open $proc for writing: $!";
	print $procfd $dbprocsrc;
	close $procfd;

	if ($flag) {
		$pg->db->dollar_only->query(q|update _procs set md5=$1 where "name"=$2|, $dbmd5, $proc);
	} else {
		$pg->db->dollar_only->query(q|insert into _procs ("name", md5) values ($1, $2)|, $proc, $dbmd5);
	}
}

sub dbmd5 {
	my $proc = shift;
	my $dbmd5 = $pg->db->dollar_only->query($procsrcq, $proc)->array;
	if ($dbmd5 and @$dbmd5 and $$dbmd5[0]) {
		return md5_hex($$dbmd5[0]);
	}
	warn "no proc $proc in the db?";
	return undef;
}

sub procmd5 {
	my $proc = shift;
	my $procmd5 = $pg->db->dollar_only->query(q|SELECT md5 FROM _procs WHERE "name" = $1|, $proc)->array;
	if ($procmd5 and @$procmd5 and $$procmd5[0]) {
		return $$procmd5[0];
	}
	warn "no func $proc in the procs table?";
	return undef;
}

sub md5sum {
	my $f = shift;
	open my $fh, '<', $f or die "Cannot open $f for md5summing: $!";
	binmode $fh;
	my $md5sum = Digest::MD5->new->addfile($fh)->hexdigest;
	close $fh;
	return $md5sum;
}

# some queries
BEGIN {
$allprocsq = <<'EOT';
SELECT
  p.proname as "name",
  pg_catalog.pg_get_functiondef(p.oid) as "code"
FROM pg_catalog.pg_proc p
  LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE pg_catalog.pg_function_is_visible(p.oid)
  AND n.nspname = 'jobcenter'
  ORDER BY 1;
EOT

$procsrcq = <<'EOT';
SELECT
  pg_catalog.pg_get_functiondef(p.oid) as "code"
FROM pg_catalog.pg_proc p
  LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE pg_catalog.pg_function_is_visible(p.oid)
  AND n.nspname = 'jobcenter'
  AND p.proname = $1
EOT
}
