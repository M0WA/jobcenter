#!/usr/bin/perl 

=pod

=head1 JobCenter Language

=head2 Terminology

=head3 Workflow

A sequence of tasks or steps to accomplish something.

=head3 Task

A step in a workflow. A tasks can be a 'action', a 'workflow', a
'procedure' or a 'system task'.

=over

=item action
Step executed by a external worker

=item workflow
A call to another workflow, creating a child-job.

=item procedure
A stored procedure in the database that contains the JobCenter schema.

=item 'system task'
Workflow primitives like 'if' and 'while' are implemented as 'system tasks'.

=back

=head3 Job

An instance of a workflow.

=head2 Concepts

=head3 Data Types

The recognized data types are based on the basic types of JSON, with a
extension to specify required fields of JSON objects.

The basic types are number, string, boolean and null. The composite types
are array and json (for a free-form JSON object).

Any other types names refer to JSON object of which a number of top-level
fields are required to be present. Currently no further checking of the
values of those fields is done.

=head3 Input Map

A input map copies values from the workflow state (consisting of the
arguments to the workflow, the workflow environment and the workflow state
variables) to the inputs of the called action.

A input map is a series of assignments to the (implicit) 'i' object, one per
line.  For example: "foo = v.bar" or "etwas = a.thing[v.offset]".  In the
right hand side expression the objects that can be referenced are 'a' for
the arguments, 'e' for the environment, 'v' for the state variables and 't'
for a temporary object.

On the left hand side the 'i' is implicit, also allowed is 't' as a place to
store temporary values. (Available for the duration of the evaluation of the
input map.)

A line of the form "<foo>" is a shorthand notation for "i.foo = v.foo".

=head3 Output Map

A output map uses the results of the called actions to modify the state
variables of the workflow, one assignment per line.  For example: "bar =
o.baz".  The 'v' on the left hand side is implicit, also allowed is 't' for
the temporary object. On the right hand side the available objects are 'o'
for the action outputs and the familiar 'a', 'e' and 't' objects.

A line of the form "<foo>" is a shorthand notation for "v.foo = o.foo".

=head3 Workflow Output Map

A workflow output map uses the workflow state to generate the workflow
outputs on completion of the workflow.  (This is what the "end" task that
every workflow has does).  The assignments are in the usuall one-per-line
format, on the left hand side the 'o' is implicit and 't' is allowed. 
Available on the right hand side are 'a', 'e','v' and 't'.

A line of the form "<foo>" is a shorthand notation for "o.foo = v.foo".

=head3 Limits

A workflow as executed by the JobCenter has two default limits: 

=over

=item max_steps = 100

On every step ("state transition") of the execution of the job the
stepcounter is incremented.  When the max_steps value is exceeded a fatal
error is raised.

=item max_depth = 10

Every time that a job calls another workflow (or its own workflow) the call
depth is incremented.  When a call causes the call depth to exceed the
max_depth value a fatal error is raised.

=back

Together those two limits should give a reasonable protection from runaway
workflows due to endless loops or unbounded recursion.

=head3 Locking

A workflow can declare exclusive locks for resources that it needs exclusive
access to.  Locks have a 'type' and a 'value', for example resp. 'domain' and
'example.com'.

Locks can be declared 'manual' when at compile time the lock value is still
unknown. A explicit lock step is then required to acquire the lock.

Locks can be inherited by child-jobs if the locks are declared with the
'inherit' option. During the execution child-jobs the parent job is
blocked waiting for those child-jobs, so it can be save to allow the
child-jobs to 'borrow' the lock, one at a time, so that access to a resource
can be co-ordinated.

All locks not declared manual are acquired at the start of the job, in the
order that they are declared. If a deadlock is detected a fatal error is
raised.

All locks are automatically released on job termination. Those that were
'borrowed' are returned to the parent.

All locks can be unlocked manually during job execution using the unlock
statement.

=head3 Events

The JobCenter has a publish-subscribe event model.  Jobs can subscribe to
events and then later wait for those events to turn up.  Events are
referenced to by name where relevant.  Events have a 'event mask' which is
just a jsonb object that has to be contained in the event data for the event
to be recognized.

=head3 Error Handling

Runtime errors (such as type errors of division by zero) encountered by the
JobCenter per default lead to the termination of the job with an error
object as output.  A child-job terminationg with an error will cause an
error of class childerror to be raised in the parent.

Non-fatal errors can be caught with the try-catch construction, any errors
encountered during the execution of the try-block will cause the execution
to jump to the catch-block immediately.  In the enviroment the '_error'
object will contain information about the error.  (At least a error class
and a error message).

=head3 Parrallel Execution

A job can create multiple child-jobs that will execute in parrallel using
the split statement.  The child-jobs are created by callflow statements in
the order specified.  After the creation of the child-jobs the parent-job
will wait for all child-jobs to terminate successfully and then execute the
output maps of the callflow statements in the order specified.

If any the child-jobs terminates with an error of class childerror will be
raised in the parent. If the error in the parent is not handled the parent
will terminate and the other child-jobs will get a abort signal.

=head3 Perl Blocks

All expressions and assignments are compiled to Perl code that is executed
in a sandbox. All expression and assignments can be replaced with a
perl-block using the [[ <perl> ]] or [<delimiter>[ <perl> ]<delimiter>]
syntax. Currently perl-blocks are required for using regular expressions.

Inside a perl-block the various JSON objects are available as hashses, so
the a.input argument becomes $a{input} etc.

=head2 Worklow

=head3 Toplevel Elements

=over

=item workflow <name>:

Start definining a workflow of that name.

=item in:

Declare the input parameters, one per line.

 Format: <name> <type> [<default>]

Paramaters without a default value are required.

=item out:

Declare the output parameters, one per line.

 Format: <name> <type> ['optional']

Parameters without the 'optional' keyword are required.

=item limits

Declare the workflow limits. See L</Limits>

=item locks

Declare the workflow locks.

 Format: <type> <value> ['manual' | 'inherit']

=item do:

The actual workflow code goes here

=item wfomap

Declare the L</Workflow Output Map>.

=back

=head3 Steps and Statements

=over

=item call

 call <name>:
     <imap>
 into:
     <omap>

The <imap> and <omap> are lists of assignments. See L</Input Map>.

=item case

 case <expression>:
 when <label>:
     <block>
 else:
     <block>

A case label is a comma-seperated list of strings.  Strings can be use
single or double quotes.  String that are valid identifiers can be left
unquoted.

=item eval

 eval:
     <assignments>

=item goto

 goto <label>

Jumps to <label>. <labels>s are created by L</label> statements.

=item if

 if <expression>:
     <block>
 elsif <expression>:
     <block>
 else:
     <block>

=item label

 label <label>

Declare a <label>, a target for goto.

=item lock

 lock <type> <value>

See L</Locking>

=item raise_error

 raise_error:
      msg = <rhs>

=item raise_event

 raise_event:
      event = <rhs>

=item repeat

 repeat:
     <block>
 until <expression>

=item return

 return

Causes immediate execution of the end task.

=item split

 split:
     callflow <name1>:
         <imap>
     into:
         <omap>
    callflow <name2>:
        <imap>
    into:
        <omap>
    ...

See L</Parrallel Execution>

=item subscribe

 subscribe:
     name = <rhs>
     mask = <rhs>

See L</Events>

=item try

 try:
     <block>
 catch:
     <block>

See L<Exceptions>

=item unlock
 unlock <type> <value>

See L</Locking>

=item unsubscribe

 unsubscribe:
     name = <rhs>

=item wait_for_event

 wait_for_event:
     events = <eventlist>
     timeout = <number>
 into:
     <omap>

=item while

 while <expression>:
     <block>

=back

=head2 Action

=head3 Toplevel Elements

=over

=item action <name>:

Start definining a workflow of that name.

=item in:

Declare the input parameters, one per line.

 Format: <name> <type> [<default>]

Paramaters without a default value are required.

=item out:

Declare the output parameters, one per line.

 Format: <name> <type> ['optional']

Parameters without the 'optional' keyword are required.

=back

=cut
